/*引用*/
#include <iostream>
using namespace std;

int main()
{
	int n = 100;
	int a = 50;
	int & m = n;/*&表示m是一个引用，是n的引用。也就说m就代表n这个变量。
				m是n的别名(也就是小名)，以后m永远就代表n这个变量了*/
	m = 200;
	printf("m = %d, n = %d\n", m, n);
	printf("&m:%p, &n:%p\n", &m, &n);
	m = a;//把a的值赋给n
	return 0;
}

//函数返回引用和返回变量本身的区别
#include <stdio.h>

int & fun()
{
	int r = 10;
	return r;
}
int main()
{
	int n = fun();
	printf("n = %d\n", n);
	return 0;
}

输出结果为：
n = 4223160
Press any key to continue
如果把int & fun()的返回类型改为int fun()就正常了，为什么？


#include <iostream>
using namespace std;

void main()
{
	int const n = 10;
	int * p  = (int *)&n;
	*p = 20;
	printf("*p = %d, n = %d\n", *p, n);
}


/*函数的参数可以有默认值*/
#include <iostream>
using namespace std;
void fun(int m1 = 1, int n1 = 2);
int main()
{
	int m = 100;
	int n = 50;
	fun(10);
	return 0;
}

void fun(int m1, int n1)//函数参数有默认值
{
	printf("m1 = %d, n1 = %d\n", m1, n1);
}

/*函数的参数可以有默认值*/
#include <iostream>
using namespace std;
void fun(int m1, int n1, int h1 = 3);
int main()
{
	int m = 100;
	int n = 50;
	int h = 30;
	fun(10, 20);
	return 0;
}

void fun(int m1, int n1, int h1)//函数参数有默认值
{
	printf("m1 = %d, n1 = %d, h1 = %d\n", m1, n1, h1);
}


/*函数的重载*/
#include <iostream>
using namespace std;
void fun()
{
	printf("无参的fun\n");
}
void fun(int n)
{
	printf("有一个int参数的fun:n = %d\n", n);
}
void fun(double n)
{
	printf("有一个double参数的fun:n = %lf\n", n);
}
void fun(int n, double m)
{
	
	printf("有int 和double 参数的fun:n = %d, m = %lf\n", n, m);
}
int fun(int n, double m)
{	
	printf("有double 和int参数的fun:n = %lf, m = %d\n", n, m);

	return 10;
}
int main()
{
	int m = 100;
	int n = 50;
	int h = 30;
	h = fun(5, 7.5);
	return 0;
}


/*函数参数默认值和函数重载同时出现可能会出错*/
#include <iostream>
#include <cstring>
using namespace std;
void fun()
{
	cout << "hello" << endl;
}
void fun(int n = 5)
{
	cout << "world" << endl;
}
int main()
{
	fun();//因为fun函数的形参n有默认值，此时不知道调用哪一个，所以报错
	fun(5);//这样可以
	return 0;
}



#include <iostream>
#include <iomanip> //要用到格式控制符
using namespace std;
int main()
{
double amount = 22.0/7;
cout << amount << endl;
cout << setprecision(0) << amount << endl //精度为 0
<< setprecision(1) << amount << endl //精度为 1
<< setprecision(2) << amount << endl //精度为 2
<< setprecision(3) << amount << endl //精度为 3
<< setprecision(4) << amount << endl; //精度为 4
cout << setiosflags(ios::fixed); //定点表示
cout << setprecision(8) << amount << endl; //精度为 8
cout << setiosflags(ios::scientific) << amount << endl; //科学计数法表示
cout << setprecision(6); //重新设置成原默认设置
return 0;
}