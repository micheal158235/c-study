
第七天：继承和派生

1. 什么是继承
	1.1 简单示例
	1.2 继承的层次性
2. 派生方式
	2.1 public派生与private派生
	2.2 派生类访问权限
3. 多基派生
	3.1 多基派生的声明和定义
	3.2 多基派生的二义性问题
	3.3 多基派生二义性问题的解决方案
4. 共同基类(虚基类)
	4.1 共同基类的二义性
	4.2 共同基类二义性问题的解决方案
	4.3  虚基派生二义性与多基派生二义性不同
5. 单基派生类的构造函数和析构函数
	5.1 单基派生类的构造函数
	5.2 单基派生类的析构函数
	5.3 多基派生类的构造函数和析构函数
	5.4 虚基派生的构造函数和析构函数
6. 分清继承还是组合
	6.1 继承不是万金油
	6.2 组合
7. 基类与派生类对象间的相互转换
	7.1 单基继承的类型适应
	7.2 多基继承的类型适应
	7.3 公共基类的类型适应
	7.4 虚基类的类型适应
8. 小结
课后作业及思考

-------------------------------------------------------------------------
	面向对象程序设计的一个重要特点就是可以在既
有类的基础上定义新的类，而不用将既有类的内容
重新书写一遍，这称为“继承”（inheritance），既
有类称为“父类”或“基类”，在它的基础上建立的类
称为“派生类”、“导出类”和“子类”。

-------------------------------------------------------------------------
1. 什么是继承
	
	继承是很自然的概念，广泛存在于现实世界中，
如家族图谱，动植物分类图等。

	对面向对象的程序设计(OOP)而言，继承的引入意
义巨大：首先，程序员可以按现实世界、按自然
的方式去思考和解决问题，组织信息，提高了效
率，其次，可以复用基类的代码，并可以在继承
类中增加新代码或者覆盖基类的成员函数，为基
类成员函数赋予新的意义，实现最大限度的代码
复用。

	MFC中广泛应用了单基继承。参见MSDN中的MFC继
承结构图。
	
-------------------------------------------------------------------------
1.1 简单示例
//继承与派生的概念 由point类 派生出 point3D类
#include <iostream>
using namespace std;

class point		//point类定义
{
private:		//private成员列表，表示点的坐标信息
	int xPos;
	int yPos;
	
public:
	point(int x = 0, int y = 0)	//构造函数，带缺省参数
	{
		xPos = x;
		yPos = y;
	}
	
	void disp()		//成员disp函数，用来输出点的信息
	{
		cout << "( " << xPos << " , " << yPos << " )" << endl;
	}
	
	int GetX()		//读取private成员xPos
	{
		return xPos;
	}
	
	int GetY()		//读取private成员yPos
	{
		return yPos;
	}
};

class point3D:public point	//3维点类point3D，从point类继承而来
{
private:
	int zPos;				//在point类基础上增加了zPos坐标信息
	
public:
	point3D(int x, int y, int z):point(x, y)//派生类构造函数，初始化表中调用基类构造函数
	{
		zPos = z;
	}
	
	void disp()				//隐藏了基类的中的同名disp函数
	{
		cout << "( " << GetX() << " , " << GetY() << " , " << zPos << " )" << endl;
	}
	
	int calcSum()			//增添了计算3个数据成员和的函数
	{
		return GetX() + GetY() + zPos;
	}
};

int main()
{
	point pt1(7, 8);			//建立point类对象pt1
	pt1.disp();					//显示pt1的信息

	point3D pt2(3, 4, 5);		//建立point3D类对象pt2
	pt2.disp();					//显示pt2的信息

	int res = pt2.calcSum();	//计算pt2中3个坐标信息的加和
	cout << res << endl;		//输出结果

	return 0;
}

	point类是二维点类，三维点类point3D是从point类
继承而来的，则point类称为“基类”、point3D类称为“派生类”。在
point3D类内不用再对xPos和yPos进行定义性声明，只要增加一个
private成员zPos即可，还可在point3D类内定义与point类某个成员
函数同名的函数以实现功能覆盖，如point3D中的disp函数实现了
point类中disp函数不同的功能。根据需要可再point3D类增加其他
一些成员函数和数据成员，如calcSum函数。

继承的定义形式一般如下：
	class 派生类 : 派生方式 基类 {…}; //public, protected, private
	
派生类生成过程包含3个步骤：
	1. 吸收基类的成员
	2. 改造基类的成员
	3. 添加新的成员
-------------------------------------------------------------------------
1.2 继承的层次性

	任何一个类都可以派生出新类，派生类还可以再
派生出新的类，因此，基类和派生类是相对而言
的。一个基类可以是另一个基类的派生类，这样
便构建了层次性的类结构，如所示，类B是A的派
生类，同时又派生了新类C，B又可以看作是C的基
类。
	
-------------------------------------------------------------------------
2. 派生方式

	派生有public、protected、private三种方式，
不同的派生方式下，派生类对基类成员的访问权
限以及外部对基类成员的访问权限有所不同，本
节详细讨论不同的派生方式。

-------------------------------------------------------------------------
2.1 public派生与private派生

C++中，利用基类派生其子类（派生类）的基本格式为：
class 派生类名：派生方式 基类名
{
	private:
	新增私有成员列表;
	public:
	新增公开成员列表;
};

示例：
#include <iostream>
using namespace std;
class A
{
protected:
	int m;
public:
	int n;
	void funA()
	{
		cout<<"funA\n";
		m = 30;
	}
	A()
	{
		cout<<"A的构造函数被调用\n";
		n = 10;
		m = 20;
	}
	~A(){cout<<"A的析构函数被调用\n";}
};

class B:public A//B类继承A类，A是基类(父类)，B是派生类(子类)
{
public:
	double d;
	B()
	{
		cout<<"B的构造函数被调用\n";
		d = 1.5;
	}
	void funB()
	{
		cout<<"funB\n";
		m = 30;
		funA();
	}
	~B(){cout<<"B的析构函数被调用\n";}
};

int main()
{
	B b;
//	b.m = 30;
//	b.funA();
	b.funB();
	return 0;
}

	通过继承，派生类自动得到了除基类私有成员以外的其它所有数据成员和
成员函数，在派生类中可以直接访问，从而实现了代码的复用。派生方式
是指public, protected和private派生。
-------------------------------------------------------------------------
2.2 派生类访问权限

	private成员是私有成员，只能被本类的成员函数所访问，
派生类和类外都不能访问。
	
	public成员是公有成员，在本类、派生类和外部都可访问。
	
	protected成员是保护成员，只能在本类和派生类中访问。
是一种区分血缘关系内外有别的成员。

	派生类的访问权限规则如下：
1. 基类的private成员在外部和派生类中均不可访问
2. private派生使得基类中的所有成员都变成private成员，
/*在外部和其进一步的派生类中都不可访问*/
3. protected派生使得基类中的所有非private成员权限都
降一级：public降为protected，protected降为
private
4. public派生时，基类的所有成员在派生类中的访问权限
不变

示例：
#include <iostream>
using namespace std;
class A
{
private:
	int m;
public:
	int n;
	void funA()
	{
		cout<<"funA\n";
		m = 30;
	}
	A()
	{
		cout<<"A的构造函数被调用\n";
		n = 10;
		m = 20;
	}
	~A(){cout<<"A的析构函数被调用\n";}
};

class B:public A//B类继承A类，A是基类(父类)，B是派生类(子类)
{
public:
	double d;
	B()
	{
		cout<<"B的构造函数被调用\n";
		d = 1.5;
	}
	void funB()
	{
		cout<<"funB\n";
		m = 30;
	}
	~B(){cout<<"B的析构函数被调用\n";}
};

int main()
{
	B b;
	cout<<b.n<<endl;//继承后，b里面就拥有A类的所有成员
	b.funA();
	A a;
//	a.m = 30;
	return 0;
}
-------------------------------------------------------------------------
3. 多基派生

	派生类只有一个基类时，称为单基派生，在实际
运用中，我们经常需要派生类同时具有多个基类，
这种方法称为多基派生或多重继承，下图是双基
继承的示例，在实际应用中，还允许使用三基甚
至是更多基继承。
-------------------------------------------------------------------------
3.1 多基派生的声明和定义

	在C++中，声明和定义具有两个以上基类的派生类与声明单
基派生类的形式类似，只需将要继承的多个基类用逗号分
开即可，如
派生类名(参数表):基类名1(参数表1),基类名2(参数表2),…,基
类名n(参数表n)
{
	private:
	新增私有成员列表;
	public:
	新增公开成员列表;
};

例如，从A类和B类派生出C类的方式如下：
class C : public A, public B
{
	//……
};

示例：
//多基派生的声明和定义
#include <iostream>
using namespace std;

class A				//类A的定义
{
public:
	void print()	//A中定义了print函数
	{
		cout << "Hello,this is A" << endl;
	}
};

class B				//类B的定义
{
public:
	void show()		//B中定义了show函数
	{
		cout << "Hello,this is B" << endl;
	}
};

class C : public A, public B	//类C由类A和类B共同派生而来
{
};

int main()
{
	C c;
	c.print();
	c.show();
	return 0;
}

-------------------------------------------------------------------------
3.2 多基派生的二义性问题

	一般来说，在派生类中对基类成员的访问应当具
有唯一性，但在多基继承时，如果多个基类中存
在同名成员的情况，造成编译器无从判断具体要
访问的哪个基类中的成员，则称为对基类成员访
问的二义性问题。

示例：
//多基派生的声明和定义
#include <iostream>
using namespace std;

class A				//类A的定义
{
public:
	void print()	//A中定义了print函数
	{
		cout << "Hello,this is A" << endl;
	}
};

class B				//类B的定义
{
public:
	void print()		//B中定义了show函数
	{
		cout << "Hello,this is B" << endl;
	}
};

class C : public A, public B	//类C由类A和类B共同派生而来
{
};

int main()
{
	C c;
	c.print();	//出错，编译器不知道访问哪个print
	return 0;
}
-------------------------------------------------------------------------
3.3 多基派生二义性问题的解决方案

	若两个基类中具有同名的数据成员或成员函数，应使用成
员名限定来消除二义性，如：
void disp()
{
	A::print(); //加成员名限定 A::
}

示例:
//多基派生的声明和定义
#include <iostream>
using namespace std;

class A				//类A的定义
{
public:
	void print()	//A中定义了print函数
	{
		cout << "Hello,this is A" << endl;
	}
};

class B				//类B的定义
{
public:
	void print()		//B中定义了show函数
	{
		cout << "Hello,this is B" << endl;
	}
};

class C : public A, public B	//类C由类A和类B共同派生而来
{
};

int main()
{
	C c;
	c.A::print();	//通过类名::的形式明确指明访问那个类的print可以解决二义性问题
	c.B::print();	//通过类名::的形式明确指明访问那个类的print可以解决二义性问题
	return 0;
}

	上述代码明确指明要在disp函数内要调用的是从类A继承来
的print函数，但即使做了如此修改，仍无法编译通过，问
题出在语句“c.print();”上，虽然也可以通过添加作用
域限定符，诸如“c.A::print();”来解决，但最好在类C
中也定义一个同名print函数，根据需要调用A::print()还
是B::print()，从而实现对基类同名函数的隐藏。关于成
员函数重载、覆盖和隐藏的不同将在稍后介绍。
-------------------------------------------------------------------------
4. 共同基类(虚基类)

	多基派生中，如果在多条继承路径上有一个共同
的基类，如图10.4所示，不难看出，在D类对象中，
会有来自两条不同路径的共同基类（类A）的双重
拷贝。

-------------------------------------------------------------------------
4.1 共同基类的二义性

	共同基类和多基派生的共同作用，使得在派生类
中会出现多个共同基类的拷贝，这很容易带来二
义性问题.

示例：
//共同基类带来的二义性
#include <iostream>
using namespace std;

class A					//公共基类
{
protected:				//protected成员列表
	int x;

public:					//public成员列表
	A(int xp = 0)		//构造函数
	{
		x = xp;
	}

	void SetX(int xp)	//设置protected成员x的值
	{
		x = xp;
	}

	void print()
	{
		cout << "this is x in A: " << x << endl;
	}
};

//class B: virtual public A
class B: public A		//类B由类A派生而来
{
};

//class C: virtual public A		//类C由类A派生而来
class C: public A		//类C由类A派生而来
{
};

class D : public B, public C	//类D由类B和类C派生而来
{
};

int main()
{
	D d;			//声明一个D类对象exD
	d.SetX(5);		SetX()具有二义性, 系统不知道是调用B类的还是C类的SetX()函数
	d.print();		print()具有二义性, 系统不知道是调用B类的还是C类的print()函数
//	d.B::SetX(5);	//这样可以通过编译，但一般不推荐这样做
//	d.B::print();	//这样可以通过编译，但一般不推荐这样做	
	
	cout<<"sizeof(A):"<<sizeof(A)<<endl;
	cout<<"sizeof(B):"<<sizeof(B)<<endl;
	cout<<"sizeof(C):"<<sizeof(C)<<endl;
	cout<<"sizeof(D):"<<sizeof(D)<<endl;

	return 0;
}

	D类通过B类和C类各继承了一次A类
的函数SetX()和Print()，从而产生了二份拷贝，
进而导致了二义性。
-------------------------------------------------------------------------
4.2 共同基类二义性问题的解决方案

	使用关键字virtual将共同基类A声明为虚基类，
可有效解决上述问题。在定义由共同基类直接派
生的类（示例中的类B和类C）时，使用下列格式
定义：
class 派生类名 : virtual 派生方式 基类名
{
	//类定义
};

示例：
//使用虚基类解决共同基类带来的二义性问题
#include <iostream>
using namespace std;

class A				//公共虚基类A
{
protected:			//protected成员列表
	int x;

public:
	A(int xp = 0)		//构造函数，带缺省构造参数
	{
		x=xp;
	}

	void SetX(int xp)//SetX函数用以设置protected成员x
	{
		x = xp;
	}

	void print()	//print函数输出信息
	{
		cout << "this is x in A: " << x << endl;
	}
};

class B: virtual public A	//B由A虚基派生而来
{
};

class C: virtual public A	//C由A虚基派生而来
{
};

class D:public B,public C	//D由B和C共同派生
{
};

int main()
{
	D d;			//声明一个D类对象exD

	d.SetX(5);		//SetX函数，因为virtual派生，在D中只有一个版本，不会二义
	d.print();		//print函数，因为virtual派生，在D中只有一个版本，不会二义
	cout<<"sizeof(A):"<<sizeof(A)<<endl;
	cout<<"sizeof(B):"<<sizeof(B)<<endl;
	cout<<"sizeof(C):"<<sizeof(C)<<endl;
	cout<<"sizeof(D):"<<sizeof(D)<<endl;

	return 0;
}
-------------------------------------------------------------------------
4.3  虚基派生二义性与多基派生二义性不同

	尽管看起来很相似，但虚基派生和多基派生带来的
二义性有些细微的差别：
1. 多基派生的二义性主要是成员名的二义性，通
过加作用域限定符来解决。
2. 虚基派生的二义性则是共同基类成员的多重拷
贝带来的存储二义性，使用virtual派生来解决。

示例：
//使用虚基类解决共同基类带来的二义性问题
#include <iostream>
using namespace std;

class A				//公共虚基类A
{
protected:			//protected成员列表
	int x;

public:
	A(int xp = 0)		//构造函数，带缺省构造参数
	{
		x=xp;
	}

	void SetX(int xp)//SetX函数用以设置protected成员x
	{
		x = xp;
	}

	void print()	//print函数输出信息
	{
		cout << "this is x in A: " << x << endl;
	}
};

class B: virtual public A	//B由A虚基派生而来
{
};


class C: virtual public A	//B由A虚基派生而来
{
};


int main()
{
	B b;
	b.SetX(5);
	b.print();
	C c;
	c.SetX(5);
	c.print();
	return 0;
}
-------------------------------------------------------------------------
5. 单基派生类的构造函数和析构函数

	派生时，构造函数和析构函数是不能继承的，为
了对基类成员进行初始化，必须对派生类重新定
义构造函数和析构函数，并在派生类构造函数的
初始化列表中调用基类的构造函数。

	由于派生类对象通过继承而包含了基类数据成员，
因此，创建派生类对象时，系统首先通过派生类
的构造函数来调用基类的构造函数，完成基类成
员的初始化，然后再执行派生类的构造函数对派
生类中新增的成员进行初始化。
-------------------------------------------------------------------------
5.1 单基派生类的构造函数

	派生类构造函数的一般格式为：
派生类名(总参数表): 基类构造函数(参数表)
{
	//函数体
};

	必须将基类的构造函数放在派生类的初始化表达式中，以调
用基类构造函数完成基类数据成员的初始化，派生类构造函
数实现的功能，或者说调用顺序为：
1. 完成对象所占整块内存的开辟，由系统在调用构造函数
时自动完成。
2. 调用基类的构造函数完成基类成员的初始化。
3. 若派生类中含对象成员、const成员或引用成员，则必须
在初始化表达式中完成其初始化。
4. 派生类构造函数体被执行。

示例：
//派生类构造函数的调用顺序
#include <iostream>
using namespace std;

class A					//类A的定义
{
private:				//private成员列表
	int x;

public:
	A(int xp=0)			//构造函数，带缺省参数
	{
		x = xp;
		cout << "A的构造函数被执行" << endl;
	}
};

class B					//类B定义
{
public:
	B()					//无参构造函数
	{
		cout << "B的构造函数被执行" << endl;
	}
};

class C:public A		//类C由类A派生而来
{
private:
	int y;
	B b;

public:
	C(int xp, int yp) : A(xp), b()	//构造函数，基类构造函数在初始化表中调用
	{
		y = yp;
		cout << "C的构造函数被执行" << endl;
	}
};

int main()
{
	C c(1, 2);			//创建C类对象c
	return 0;
}

-------------------------------------------------------------------------
5.2 单基派生类的析构函数

	当对象被删除时，派生类的析构函数被执行。析
构函数同样不能继承，因此，在执行派生类析构
函数时，基类析构函数会被自动调用。

	执行顺序是先执行派生类的析构函数，再执行基
类的析构函数，这和执行构造函数时的顺序正好
相反。

示例：
//派生类的析构函数
#include <iostream>
using namespace std;

class A					//A类的定义
{
private:				//private成员列表
	int x;	
public:					//public成员列表
	A(int xp = 0)		//构造函数，带缺省参数
	{
		x = xp;
		cout << "A的构造函数被执行" << endl;
	}
	~A()				//析构函数
	{
		cout << "A的析构函数被执行" << endl;
	}
};

class B					//B类的定义
{
public:					//public成员列表
	B()					//无参构造函数
	{
		cout << "B的构造函数被执行" << endl;
	}
	~B()				//析构函数
	{
		cout << "B的析构函数被执行" << endl;
	}
};

class C:public A		//类C由类A派生而来
{
private:
	int y;	
	B b;				//对象成员

public:
	C(int xp, int yp):A(xp), b()	//派生类的构造函数，基类和对象成员都在初始化表中完成初始化
	{
		y = yp;
		cout << "C的构造函数被执行" << endl;
	}

	~C()				//析构函数
	{
		cout << "C的析构函数被执行" << endl;
	}
};

int main()
{
	C c(1, 2);			//声明一个C类对象c
	return 0;			//main函数执行完毕，c撤销，析构函数触发执行
}

-------------------------------------------------------------------------
5.3 多基派生类的构造函数和析构函数

	多基派生时，派生类的构造函数格式如（假设有N个基类）：
派生类名(总参数表)：基类名1(参数表1)，基类名2(参数表
2)，……，基类名N(参数表N)
{
	//函数体
}

	和前面所讲的单基派生类似，总参数表中包含了后面各个
基类构造函数需要的参数。

	多基派生和单基派生构造函数完成的任务和执行顺序并没
有本质不同，唯一一点区别在于首先要执行所有基类的构
造函数，再执行派生类构造函数中初始化表达式的其他内
容和构造函数体，各基类构造函数的执行顺序与其在初始
化表中的顺序无关，而是由定义派生类时指定的派生类顺
序决定的。

	析构函数的执行顺序同样是与构造函数的执行顺序相反。
	
示例：
//多基派生的构造函数和析构函数
#include <iostream>
using namespace std;

class A						//类A定义
{
public:					//private成员列表
	int x;

public:						//public成员列表
	A(int xp = 0)			//构造函数，带缺省参数
	{
		x=xp;
		cout<<"A的构造函数被执行"<<endl;
	}

	~A()					//析构函数
	{
		cout<<"A的析构函数被执行"<<endl;
	}

};

class B
{
public:
	int y;
	B(int n)		//在初始化表中调用基类构造函数
	{
		y = n;
		cout<<"B的构造函数被执行"<<endl;
	}

	~B()					//析构函数
	{
		cout<<"B的析构函数被执行"<<endl;
	}
};

class C:public A,public B
{
public:
	C(int y, int x):B(y),A(x)		//在初始化表中调用基类构造函数
	{
		cout<<"C的构造函数被执行"<<endl;

	}

	~C()					//析构函数
	{
		cout<<"C的析构函数被执行"<<endl;
	}
};

int main()
{

	C c(1, 2);
	cout<<c.x<<c.y<<endl;
	return 0;		//main函数执行完毕退出后，d销毁，析构函数触发执行
}
	
-------------------------------------------------------------------------
5.4 虚基派生的构造函数和析构函数

	对普通的多层继承而言，构造函数的调用是嵌套的，如由C1类派生C2类，C2类
又派生C3类时，C1->C2->C3，有：
C2(总参数表):C1(参数表)
C3(总参数表):C2(参数表)

	对于虚基派生来说，应该有：
B(总参数表):A(参数表)
C(总参数表):A(参数表)
D(总参数表):B(参数表),C(参数表)

	这样“A(参数表)”将被执行2次，这显然不行，因为根据虚基派生的性质，类D
中只有一份虚基类A的拷贝，因此A类的构造函数在D类中只能被调用一次。其实
实际代码是：
B(总参数表):A(参数表)
C(总参数表):A(参数表)
D(总参数表):B(参数表),C(参数表),A(参数表)

	其中A(参数表)是编译器隐式自动加上去的。并且在B(参数表),C(参数表)里不
再调用虚基类A的构造函数。

	当然我们也可以在D类构造函数的初始化列表中显式列出对虚基类A构造函数的
调用。这样可以指定传入参数的值。

	这种机制保证了不管有多少层继承，虚基类的构造函数必须且只能被调用一次。
	
示例：
//虚基派生的构造函数和析构函数
#include <iostream>
using namespace std;

class A						//类A定义
{
private:					//private成员列表
	int x;

public:						//public成员列表
	A(int xp = 0)			//构造函数，带缺省参数
	{
		x=xp;
		cout<<"A的构造函数被执行"<<endl;
	}

	~A()					//析构函数
	{
		cout<<"A的析构函数被执行"<<endl;
	}

	void Print()			//显示成员变量x的值
	{
		cout << x << endl;
	}
};

class B:virtual public A	//类B由类A虚基派生而来
{
public:
	B(int xp):A(xp)			//在初始化表中调用基类构造函数
	{
		cout<<"B的构造函数被执行"<<endl;
	}

	~B()					//析构函数
	{
		cout<<"B的析构函数被执行"<<endl;
	}
};

class C:virtual public A	//类C由类A虚基派生而来
{
public:
	C(int xp):A(xp)			//在初始化表中调用基类构造函数
	{
		cout<<"C的构造函数被执行"<<endl;
	}

	~C()					//析构函数
	{
		cout<<"C的析构函数被执行"<<endl;
	}
};

class D:public B,public C	//类D由类B和类C共同派生而来
{
public:
	D(int xp):B(xp),C(xp),A(xp)	//初始化表中不仅要调用B类和C类的构造函数，还应调用共同虚基类的构造函数A(xp)
	{
		cout<<"D的构造函数被执行"<<endl;
	}

	~D()					//析构函数
	{
		cout<<"D的析构函数被执行"<<endl;
	}
};

int main()
{
	D d(2);			//声明D类对象d
	d.Print();		//结果为2。如果去掉类D的构造函数的初始化列表中的A(xp)，则结果为0。好好体会!!!!!!!!

	cout << endl;
	B b(3);
	b.Print();		//结果为3。如果去掉类B的构造函数的初始化列表中的A(xp)，则结果为0。好好体会!!!!!!!!
	cout << endl;

	return 0;		//main函数执行完毕退出后，d销毁，析构函数触发执行
}

-------------------------------------------------------------------------
6. 分清继承还是组合

	面向对象设计的难点在于类的设计，而不是对象
的创建，就像工业生产中图纸是关键，有了图纸，
产品可以很容易地创建出来。在程序设计中，如
何处理类派生和类组合一直是个很让人觉得折磨
的问题。

	前面已提及继承的重要性，使得代码结构清晰，
大大提高了程序的可复用性，因此，很多初学者
容易犯的错误就是把继承当成灵丹妙药，不管三
七二十一拿来继承一下再说，其实，在面向问题
空间的对象组织方面，不只有继承，还有对象组
合，更高阶的结构还有聚合等。
	
-------------------------------------------------------------------------
6.1 继承不是万金油

	如果两个类没有关联，仅仅是为了使一个类的功
能更多而让其去继承另一个类，这种方法要不得，
继承不是万金油，毫无疑义的继承就像乱拉亲戚，
会让条理有序的关系变得一团糟。从逻辑上说，
继承是一种a kind of的关系（AKO）或者说IS-A
（“是一个”），汽车是车，因此，汽车类可以
从普通的车类继承而来，轮子类就不能从汽车类
继承来，轮子是汽车的一个部件，轮子可以作为
汽车类的对象成员，这就是“组合”
（compositioin）。

-------------------------------------------------------------------------
6.2 组合

	某类以另一个类对象作数据成员，称为组合，在
逻辑上，如果类A是类B的一部分（a part of）或
者说HAS-A（“有一个”），那么就不要从A类派
生出类B，而应当采用组合的方式，《高质量C++
编程指南》中“眼睛、鼻子、嘴巴、耳朵和头部”
的范例很好地解释了组合的本质：眼睛、鼻子、
嘴巴、耳朵分别是头部的一部分，头部并不是从
眼睛、鼻子、嘴巴、耳朵继承来的。

示例：
//组合还是继承？
#include <iostream>
using namespace std;

class Eye
{
public:
	void Look() {cout << "Eye.Look()." << endl;}
};

class Nose
{
public:
	void Smell() {cout << "Nose.Smell()." << endl;}
};

class Mouth
{
public:
	void Eat() {cout << "Mouth.Eat()." << endl;}
};

class Ear
{
public:
	void Listen() {cout << "Ear.Listen()." << endl;}
};

//组合方式：逻辑很清晰，后续扩展很方便。
class Head
{
private:
	Eye m_eye;
	Nose m_nose;
	Mouth m_mouth;
	Ear m_ear;

public:
	void Look()
	{
		m_eye.Look();
	}

	void Smell()
	{
		m_nose.Smell();
	}

	void Eat()
	{
		m_mouth.Eat();
	}

	void Listen()
	{
		m_ear.Listen();
	}
};

//继承方式，会给后续设计带来很多逻辑上的问题
class HeadX : public Eye, public Nose, public Mouth, public Ear
{
};

int main()
{
	Head h;
	h.Look();
	h.Smell();
	h.Eat();
	h.Listen();
	
	cout << endl;

	HeadX hx;
	hx.Look();
	hx.Smell();
	hx.Eat();
	hx.Listen();

	cout << endl;

	return 0;
}

-------------------------------------------------------------------------
7. 基类与派生类对象间的相互转换

	private派生时，外部无法通过派生类对象直接访
问从基类继承来的任何成员，因此，private派生
的使用较少，这里主要讨论public派生时基类与
派生类对象间的相互转换。

	只考虑public派生，这样可以保证在派生类中对
基类的public成员进行访问，不特别说明时，本
节所说的基类和派生类均系public派生。

-------------------------------------------------------------------------
7.1 单基继承的类型适应

	“类型适应”是指两种类型之间的关系，说A类适应B类是
指A类的对象能直接用于B类对象所能应用的场合，从这种
意义上讲，派生类适应于基类，派生类的对象适应于基类
对象，派生类对象的指针和引用也适应于基类对象的指针
和引用。

	如果一个函数可用于某类型的对象，则它也可用于该类所
有的派生类对象，不必再为处理派生类对象重载该函数。
也就是说，形参要求是基类对象时，可以直接用派生类对
象做实参。

	另外，类型适应还体现在下述方面：
（1）赋值转换
（2）指针转换

示例：
//单基继承的类型适应
#include <iostream>
using namespace std;

class Point					//类Point定义
{
private:
	int x;
	int y;

public:
	Point(int xp = 0, int yp = 0)	//构造函数
	{
		x = xp;
		y = yp;
	}

	void DispPoint()		//成员函数DispPoint的定义
	{
		printf("Point (%d, %d)\n", x, y);
	}

	int GetX()				//成员函数用以读取private成员x的值
	{
		return x;
	}

	int GetY()				//成员函数用以读取private成员y的值
	{
		return y;
	}
};

class Point3D:public Point	//类Point3D由类Point派生而来 
{
private:					//在基类Point的基础上增加的数据成员	
	int z;

public:
	Point3D(int xp = 1, int yp = 1, int zp = 1):Point(xp, yp)	//构造函数，在初始化表中调用基类的构造函数
	{
		z = zp;
	}

	void Disp3DPoint()		//成员函数Disp3DPoint
	{
		printf("Point3D (%d, %d, %d)\n", GetX(), GetY(), z);
	}
};

int main()					//主函数
{
	Point pt1(1, 1);		//声明一个Point类对象pt1
	pt1.DispPoint();		//通过pt1调用DispPoint函数

	Point3D pt2(2, 3, 4);	//声明一个派生类对象pt2
	pt2.Disp3DPoint();		//通过pt2调用Disp3DPoint函数

	pt1 = pt2;				//派生类对象为基类对象赋值
	pt1.DispPoint();

	Point& rpt1 = pt2;		//派生类对象初始化基类对象引用
	rpt1.DispPoint();

	Point* ppt1 = &pt2;		//派生类对象地址为基类指针赋值
	ppt1->DispPoint();

	((Point3D*)ppt1)->Disp3DPoint();//基类指针向派生类指针的强制转换

	ppt1 = &pt1;
	((Point3D*)ppt1)->Disp3DPoint();//有问题. 强制转换后, z变量所在内存无效

//	pt2 = (Point3D)pt1;		//编译错误.
	return 0;
}

-------------------------------------------------------------------------
7.2 多基继承的类型适应

	相比单基派生的情况，多基派生略显复杂，不过基本原理
是一样的，所有的派生类都适应于基类，举例来说，如所
示的继承结构，类层次的定义为：
class A
class B
class C:public A
class D:public B
class E:public C,public D

则下述语句都是合法的：
A a;B b;C c;D d;Ee;
A *pa;B *pb; C *pc; D *pd; E *pe;
a=c;a=e;b=d;b=e;d=e;A&ra=e;
pa=pc;pa=pe;pb=pd;pb=pe;pc=pe;pd=pe;

-------------------------------------------------------------------------
7.3 公共基类的类型适应

	如果多基派生时出现公共基类，并且没有对该基类使用
virtual虚拟派生，在对象赋值和指针转换时，可能会出现
二义性错误，举例来说，如所示的派生结构，其类定义简
写为：
class A
class B:public A
class C:public A
class D:public B,public C

下述语句合法：
a=b;a=c;b=d;c=d;pa=pb;pa=pc;pb=pd;pc=pd;

下述语句非法，二义性错误：
a=d; pa=pd; pd=pa;

二义性的解决方案：
a=B(d);及pa=(A*)(B*)pd;和pd=(D*)(B*)pa;

-------------------------------------------------------------------------
7.4 虚基类的类型适应

	如果使用类A虚拟派生出类B和类C，则在类D的对象中只有
一份A类对象的拷贝，D类对象的内存分布和共同基类的有所
不同。此时，派生类对象d的地址可以直接赋给A类指针，不
需要指明路径和强制转换，如：
		pA＝&d;
		
由D类对象对A类对象的赋值和初始化引用也是合法的，如
		a=d;
		A& rA=d;
		
但是，相反的转换是不允许的，即使添加了全部路径和强制
转换也不可以，比如：
		D* ppD=(D*)(B*)pA; //非法
		
	上述语句会产生编译错误，这是因为系统在为D类对象分配
内存时，虚基类中的数据成员在派生类对象中的布局和非虚
基派生时有所不同，所以，不能将指向虚基类的指针（或引
用）赋给指向派生类的指针(或引用)。

-------------------------------------------------------------------------
8. 小结
	
1. 本次内容主要讨论了C++面向对象设计中的继承问题。继承的重
要性是支持程序代码复用，它能够从已存在的类中派生出
新类，继承基类的成员，而且可以通过覆盖基类成员函数，
产生新的行为。派生可以从一个基类派生，称为单基继
承；也可以从多个基类派生，称为多基继承；派生类也可
以再派生出新类，构成多级继承结构。

2. 本次内容介绍并引入了一种新的数据成员访问权限protected，
对象中的protected成员无法在外部访问，但可以被有血缘
关系的类访问。派生有3种方式，各个方式的不同在于派生
后基类成员在派生类的访问权限不同。

3. 派生类的构造函数和析构函数与普通类略有不同，必须将
对基类的构造函数调用放在初始化表中，多基派生时，各
个基类构造函数的调用顺序取决于类定义时派生基类的顺
序，跟初始化表列出的构造函数调用顺序无关。

-------------------------------------------------------------------------
课后作业及思考

1. 以CDate类为基类，派生出一个新类CDateTime，
要求增加时、分、秒成员变量，并且能够将形如
“2011.2.28 23:59:59”格式的字符串转换成
CDateTime类。
2. 请考虑CDateTime类从CDate类继承是否合理？是
否应该直接重写一个CDateTime类？
-------------------------------------------------------------------------





